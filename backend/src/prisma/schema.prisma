// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for Unite types
enum UniteType {
  INSTITUT
  DCT  // Direction Centrale Transversale
  PC   // Poste de Commandement
}

// Table Utilisateurs
model User {
  id             Int       @id @default(autoincrement())
  identifier     String    @unique
  name           String
  password       String
  email          String?
  role           String    @default("USER")
  langPreference String?   @default("fr")
  isFirstLogin   Boolean   @default(true)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  unites      Unite[]          @relation("DirecteurUnite") // Directeur d'unité
  documents   Document[]       @relation("DocumentUploader")
  situations  DailySituation[] @relation("SituationCreator")

  @@map("users")
}

// Table pour les grandes unités - Base table for all unit types
model Unite {
  id          String    @id @default(uuid())
  nom         String
  code        String    @unique
  description String?
  type        UniteType // Type of unit (INSTITUT, DCT, PC)

  // Relations with directeur
  directeurId Int?
  directeur   User?     @relation("DirecteurUnite", fields: [directeurId], references: [id])

  // Relations
  personnels   Personnel[]
  situations   DailySituation[]
  sousUnites   SousUnite[]

  // Self-referential relationship for hierarchy
  parentId     String?
  parent       Unite?   @relation("UniteHierarchy", fields: [parentId], references: [id])
  children     Unite[]  @relation("UniteHierarchy")

  // Specific unit type relations
  institut     Institut?
  dct          DCT?
  pc           PC?

  @@map("unites")
}

// Table for Institut specific details
model Institut {
  id           String     @id @default(uuid())
  emplacement  String
  anneeEtude   Int?
  specialite   String?
  dateCreation DateTime?  @default(now())

  // Relation to parent Unite
  uniteId      String     @unique
  unite        Unite      @relation(fields: [uniteId], references: [id], onDelete: Cascade)

  @@map("instituts")
}

// Table for DCT (Direction Centrale Transversale) specific details
model DCT {
  id           String     @id @default(uuid())
  domaine      String?    // Domain of responsibility
  niveau       String?    // Hierarchical level
  dateCreation DateTime?  @default(now())

  // Relation to parent Unite
  uniteId      String     @unique
  unite        Unite      @relation(fields: [uniteId], references: [id], onDelete: Cascade)

  @@map("dcts")
}

// Table for PC (Poste de Commandement) specific details
model PC {
  id            String  @id @default(uuid())
  typePC        String? // Type of command post (tactical, operational, etc.)
  zoneOperation String? // Geographical area of responsibility
  niveau        String? // Hierarchical level

  // Relation to parent Unite
  uniteId       String  @unique
  unite         Unite   @relation(fields: [uniteId], references: [id], onDelete: Cascade)

  @@map("pcs")
}

// Table pour les sous-unités
model SousUnite {
  id          String  @id @default(uuid())
  nom         String
  code        String  @unique
  description String?

  // Relations avec l'unité parente
  uniteId String
  unite   Unite  @relation(fields: [uniteId], references: [id])

  // Militaires dans cette sous-unité
  militaires Militaire[]

  @@map("sous_unites")
}

// Table pour les armes (branches) militaires
model Arme {
  id          String  @id @default(uuid())
  nom         String  @unique
  description String?

  // Relations
  militaires  Militaire[]
  specialites Specialite[]

  @@map("armes")
}

// Table pour les spécialités militaires
model Specialite {
  id          String  @id @default(uuid())
  nom         String
  description String?

  // Relations
  armeId     String
  arme       Arme        @relation(fields: [armeId], references: [id])
  militaires Militaire[]

  @@map("specialites")
}

// Types de diplômes
enum TypeDiplome {
  MILITAIRE
  ACADEMIQUE
}

// Model for diploma types
model Diplome {
  id          String      @id @default(uuid())
  titre       String      @unique
  typeDiplome TypeDiplome
  description String?

  // Relations
  personnelDiplomes PersonnelDiplome[]

  @@map("diplomes")
}

// Junction table for personnel-diploma relationship

model PersonnelDiplome {
  id            String   @id @default(uuid())
  // institution   String    ←─── removed
  dateObtention DateTime
  observations  String?
  description   String?


  // Relations
  personnelId String
  personnel   Personnel @relation("PersonnelToDiplomes", fields: [personnelId], references: [id])

  diplomeId String
  diplome   Diplome   @relation(fields: [diplomeId], references: [id])

  // Update your unique constraint to drop `institution`:
  @@unique([personnelId, diplomeId, dateObtention])
  @@map("personnel_diplomes")
}



// Table pour les décorations militaires
model Decoration {
  id          String   @id @default(uuid())
  titre       String   @unique
  description String?
  dateObtention DateTime @default("2020-01-01T00:00:00Z") // Add this field with default
  
  // Relations
  militaireDecorations MilitaireDecoration[]

  @@map("decorations") // Keep same table name but with different structure
}

model MilitaireDecoration {
  id            String   @id @default(uuid())
  description   String?
  dateObtention DateTime
  observations  String?

  // Relations
  militaireId String
  militaire   Militaire @relation(fields: [militaireId], references: [id])
  
  decorationId String
  decoration   Decoration @relation(fields: [decorationId], references: [id])

  @@unique([militaireId, decorationId, dateObtention])
  @@map("militaire_decorations")
}

// Types de notation
enum TypeNotation {
  ANNUELLE
  EXCEPTIONNELLE
  STAGE
  MISSION
}

// Table pour les notations des militaires
model Notation {
  id           String       @id @default(uuid())
  typeNotation TypeNotation
  date         DateTime
  note         Float
  observations String?
  notateur     String // Nom/ID de la personne qui a fait la notation

  // Relations
  militaireId String
  militaire   Militaire @relation(fields: [militaireId], references: [id])

  @@map("notations")
}

// Status des stages
enum StatutStage {
  EN_COURS
  EFFECTUE
  ANNULE
  PLANIFIE
}

// Table pour les stages militaires
model StageMilitaire {
  id           String      @id @default(uuid())
  titre        String
  description  String?
  lieu         String
  dateDebut    DateTime
  dateFin      DateTime?
  statut       StatutStage @default(EN_COURS)
  certificat   String? // Chemin vers le certificat de stage
  observations String?

  // Relations
  militaireId String
  militaire   Militaire @relation(fields: [militaireId], references: [id])

  @@map("stages_militaires")
}

// Énumération pour le type de personnel
enum TypePersonnel {
  MILITAIRE
  CIVIL_PROFESSEUR
  CIVIL_ETUDIANT
  CIVIL_EMPLOYE
}

// Table du personnel (commune à tous les types)
model Personnel {
  id            String        @id @default(uuid())
  typePersonnel TypePersonnel
  nom           String
  prenom        String
  dateNaissance DateTime?
  lieuNaissance String?
  telephone     String?
  email         String?

  // NNI commun à tous
  nni String @unique

  // Relations - linked to Unite
  uniteId String
  unite   Unite  @relation(fields: [uniteId], references: [id])

  // Relations avec les détails spécifiques
  militaire  Militaire?
  professeur Professeur?
  etudiant   Etudiant?
  employe    Employe?

  // Diplome relation
  diplomes PersonnelDiplome[] @relation("PersonnelToDiplomes")

  // Documents et situations
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("personnels")
}

// Catégorie principale de grade militaire
enum CategorieMilitaire {
  OFFICIER
  SOUS_OFFICIER
  SOLDAT
}

// Sous-catégories pour les officiers
enum CategorieOfficier {
  OFFICIER_SUPERIEUR // Commandant, Lieutenant-Colonel, Colonel, Général
  OFFICIER_SUBALTERNE // Sous-Lieutenant, Lieutenant, Capitaine
}

// Sous-catégories pour les sous-officiers
enum CategorieSousOfficier {
  SOUS_OFFICIER_SUPERIEUR // Adjudant, Adjudant-Chef
  SOUS_OFFICIER_SUBALTERNE // Sergent, Sergent-Chef
}

// Les grades militaires
enum GradeMilitaire {
  // Officiers Supérieurs
  COMMANDANT
  LIEUTENANT_COLONEL
  COLONEL
  GENERAL
  MEDECIN_COMMANDANT
  MEDECIN_LIEUTENANT_COLONEL
  MEDECIN_COLONEL
  MEDECIN_GENERAL
  INTENDANT_COMMANDANT
  INTENDANT_LIEUTENANT_COLONEL
  INTENDANT_COLONEL
  INTENDANT_GENERAL
  COMMANDANT_INGENIEUR
  LIEUTENANT_COLONEL_INGENIEUR
  COLONEL_INGENIEUR
  GENERAL_INGENIEUR

  // Officiers Subalternes
  SOUS_LIEUTENANT
  LIEUTENANT
  CAPITAINE
  LIEUTENANT_INGENIEUR
  CAPITAINE_INGENIEUR
  INTENDANT_SOUS_LIEUTENANT
  INTENDANT_LIEUTENANT
  INTENDANT_CAPITAINE
  MEDECIN_LIEUTENANT
  MEDECIN_CAPITAINE

  // Sous-Officiers Supérieurs
  ADJUDANT
  ADJUDANT_CHEF

  // Sous-Officiers Subalternes
  SERGENT
  SERGENT_CHEF

  // Soldats
  SOLDAT_DEUXIEME_CLASSE
  SOLDAT_PREMIERE_CLASSE
  CAPORAL
}

// Table Militaire (détails spécifiques)
model Militaire {
  id        String             @id @default(uuid())
  matricule String             @unique // Matricule militaire
  grade     GradeMilitaire
  categorie CategorieMilitaire

  // Sous-catégories pour les officiers et sous-officiers
  categorieOfficier     CategorieOfficier? // Seulement rempli si categorie = OFFICIER
  categorieSousOfficier CategorieSousOfficier? // Seulement rempli si categorie = SOUS_OFFICIER

  groupeSanguin         GroupeSanguin?
  dateRecrutement       DateTime?
  telephoneService      String?
  dateDernierePromotion DateTime?

  // Situation du militaire
  situation       SituationMilitaire @default(PRESENT)
  situationDetail String? // Pour les détails supplémentaires
  situationDepuis DateTime? // Date de début de la situation actuelle
  situationJusqua DateTime? // Date de fin prévue (optionnelle)

  // Relations
  personnelId String    @unique
  personnel   Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  // Relation avec la fonction
  fonctionId String?
  fonction   Fonction? @relation(fields: [fonctionId], references: [id])

  // Relation avec sous-unité
  sousUniteId String?
  sousUnite   SousUnite? @relation(fields: [sousUniteId], references: [id])

  // Relation avec arme
  armeId String?
  arme   Arme?   @relation(fields: [armeId], references: [id])

  // Relation avec spécialité
  specialiteId String?
  specialite   Specialite? @relation(fields: [specialiteId], references: [id])

  // Relations 1-to-many
  militaireDecorations MilitaireDecoration[]
  notations            Notation[]
  stagesMilitaires     StageMilitaire[]
  situationsHistorique SituationHistorique[]

  @@map("militaires")
}

// Historique des situations des militaires
model SituationHistorique {
  id           String             @id @default(uuid())
  situation    SituationMilitaire
  detail       String?
  dateDebut    DateTime
  dateFin      DateTime
  observations String?

  // Relations
  militaireId String
  militaire   Militaire @relation(fields: [militaireId], references: [id])

  @@map("situations_historique")
}

// Table Fonction (remplace Position)
model Fonction {
  id          String  @id @default(uuid())
  titre       String
  description String?

  // Relations
  militaires Militaire[]

  @@map("fonctions")
}

// Types de contrat
enum TypeContrat {
  PERMANENT
  CDI
  CDD
  VACATAIRE
  PSV
}

// Table Professeur (détails spécifiques)
model Professeur {
  id          String      @id @default(uuid())
  specialite  String
  position    String?
  typeContrat TypeContrat

  // Relations
  personnelId String    @unique
  personnel   Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  matieres    Matiere[]
  classes     Classe[]  @relation("ProfesseurClasses")

  @@map("professeurs")
}

// Table pour les matières enseignées
model Matiere {
  id   String  @id @default(uuid())
  nom  String
  code String?

  // Relations
  professeurId String
  professeur   Professeur    @relation(fields: [professeurId], references: [id])
  coursClasses CoursClasse[]

  @@map("matieres")
}

// Type de cours
enum TypeCours {
  COURS
  TP
  TD
}

// Table pour les classes
model Classe {
  id            String @id @default(uuid())
  nom           String
  niveau        String
  anneeScolaire String

  // Relations
  professeurs  Professeur[]  @relation("ProfesseurClasses")
  etudiants    Etudiant[]    @relation("EtudiantClasses")
  coursClasses CoursClasse[]

  @@map("classes")
}

// Table de liaison cours-classe
model CoursClasse {
  id        String    @id @default(uuid())
  typeCours TypeCours
  nbHeures  Int

  // Relations
  matiereId String
  matiere   Matiere @relation(fields: [matiereId], references: [id])
  classeId  String
  classe    Classe  @relation(fields: [classeId], references: [id])

  @@map("cours_classes")
}

// Statut de l'étudiant
enum StatutEtudiant {
  PRESENT
  ABSENT
  CONSULTATION_MEDICALE
  SANCTION
  STAGE
}

// Table Étudiant (détails spécifiques)
model Etudiant {
  id         String         @id @default(uuid())
  matricule  String         @unique
  anneeEtude Int
  statut     StatutEtudiant @default(PRESENT)

  // Relations
  personnelId  String       @unique
  personnel    Personnel    @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  classes      Classe[]     @relation("EtudiantClasses")
  relevesNotes ReleveNote[]
  stages       Stage[]

  @@map("etudiants")
}

// Table pour les relevés de notes
model ReleveNote {
  id            String   @id @default(uuid())
  semestre      String
  anneeScolaire String
  dateEmission  DateTime @default(now())

  // Relations
  etudiantId String
  etudiant   Etudiant @relation(fields: [etudiantId], references: [id])
  notes      Note[]

  @@map("releves_notes")
}

// Table des notes
model Note {
  id          String @id @default(uuid())
  matiere     String
  note        Float
  coefficient Float

  // Relations
  releveNoteId String
  releveNote   ReleveNote @relation(fields: [releveNoteId], references: [id])

  @@map("notes")
}

// Table pour les stages
model Stage {
  id          String   @id @default(uuid())
  titre       String
  description String?
  entreprise  String
  dateDebut   DateTime
  dateFin     DateTime
  evaluation  String?

  // Relations
  etudiantId String
  etudiant   Etudiant @relation(fields: [etudiantId], references: [id])

  @@map("stages")
}

// Table Employé (détails spécifiques)
model Employe {
  id          String      @id @default(uuid())
  position    String
  typeContrat TypeContrat
  situation   String?     @default("PRESENT")

  // Relations
  personnelId String    @unique
  personnel   Personnel @relation(fields: [personnelId], references: [id], onDelete: Cascade)

  @@map("employes")
}

// Types de documents
enum TypeDocument {
  IDENTITE
  DIPLOME
  CONTRAT
  MEDICAL
  ADMINISTRATIF
  AUTRE
}

// Table des documents
model Document {
  id            String       @id @default(uuid())
  typeDocument  TypeDocument
  nomFichier    String
  cheminFichier String
  description   String?
  dateUpload    DateTime     @default(now())

  // Relations
  personnelId String
  personnel   Personnel @relation(fields: [personnelId], references: [id])
  uploadePar  Int
  uploadeur   User      @relation("DocumentUploader", fields: [uploadePar], references: [id])

  @@map("documents")
}

// Table pour la situation quotidienne
model DailySituation {
  id                  String   @id @default(uuid())
  dateRapport         DateTime @default(now())
  militairesPresents  Int
  civilsPresents      Int
  professeursPresents Int
  etudiantsPresents   Int
  remarques           String?

  // Relations - linked to Unite instead of Institut
  uniteId String
  unite   Unite @relation(fields: [uniteId], references: [id])
  creePar  Int
  createur User  @relation("SituationCreator", fields: [creePar], references: [id])

  @@map("daily_situations")
}

// Groupe sanguin
enum GroupeSanguin {
  A_POSITIF
  A_NEGATIF
  B_POSITIF
  B_NEGATIF
  AB_POSITIF
  AB_NEGATIF
  O_POSITIF
  O_NEGATIF
}

// Situation du militaire
enum SituationMilitaire {
  PRESENT
  ABSENT
  MISSION
  CONGE
  HOSPITALISATION
  FORMATION
  DETACHEMENT
  RETRAITE
  DISPONIBILITE
  DESERTEUR
  AUTRE
}